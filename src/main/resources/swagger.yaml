openapi: 3.0.3
info:
  title: Breath Analyzer - OpenAPI 3.0
  description: |-
    This is a Breath Analyzer Server based on the OpenAPI 3.0 specification. This provides API's for Breath Analyzer records management.

  termsOfService: http://swagger.io/terms/
  contact:
    email: sanjay.ranga.au@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://localhost:8080/api/v1

paths:

  /ba:
    get:
      tags:
        - BreathAnalyzer
      summary: Gets all the BA records
      description: Gets all the BA records
      operationId: getBARecords
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BreathAnalyzer'

    post:
      tags:
        - BreathAnalyzer
      summary: Add a BA record
      description: Add a BA record
      operationId: addBA
      requestBody:
        description: Create a new BA record
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BreathAnalyzer'

        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreathAnalyzer'
            application/xml:
              schema:
                $ref: '#/components/schemas/BreathAnalyzer'
        '405':
          description: Invalid input


  /ba/{id}:
    get:
      tags:
        - BreathAnalyzer
      summary: find a BA record by Id
      description: find a BA record by Id
      operationId: getBARecordById
      parameters:
        - name: id
          in: path
          description: ID of the location
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreathAnalyzer'
        '400':
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /ba/person/{id}:
    get:
      tags:
        - BreathAnalyzer
      summary: find all BA record for a person by Id
      description: find all BA record for a person by Id
      operationId: getAllBARecordsById
      parameters:
        - name: id
          in: path
          description: ID of the location
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreathAnalyzerResponseDto'
        '400':
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '404':
          description: Person not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /ba/location/{locationId}:
    get:
      tags:
        - BreathAnalyzer
      summary: Gets all BA record of a location
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: getBARecordsForLocation
      parameters:
        - name: locationId
          in: path
          description: ID of the location
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreathAnalyzerResponseDto'

        '400':
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '404':
          description: Location not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /location:
    post:
      tags:
        - Location
      summary: Add a location
      description: Add a location
      operationId: addLocation
      requestBody:
        description: Create a new location
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'

        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
            application/xml:
              schema:
                $ref: '#/components/schemas/Location'
        '405':
          description: Invalid input

  /location/{locationId}:

    get:
      tags:
        - Location
      summary: Gets location by Id
      description: Gets location by Id
      operationId: getLocationById
      parameters:
        - name: locationId
          in: path
          description: ID of the location
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'

        '400':
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '404':
          description: Location not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /location/sub/{locationId}:

    get:
      tags:
        - Location
      summary: Gets all sub locations of a parent location by Id
      description: Gets all sub locations of a parent location by Id
      operationId: getSubLocationsById
      parameters:
        - name: locationId
          in: path
          description: ID of the location
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationResponseDto'

        '400':
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '404':
          description: Location not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'



  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found


components:
  schemas:

    BreathAnalyzer:
      x-java-class-annotations:
        -  "@javax.persistence.Entity"
      type: "object"
      properties:
        id:
          x-java-field-annotations:
            - "@javax.persistence.Id"
            - "@javax.persistence.GeneratedValue(strategy = javax.persistence.GenerationType.IDENTITY)"
          type: integer
          format: int64
        crewid:
          type: "string"
        value:
          type: integer
        location:
          type: "string"
        deviceSno:
          type: "string"
        recordNo:
          type: "string"
        exhaleVol:
          type: "string"
        exhaleTime:
          type: "string"
        calibrationDate:
          x-java-field-annotations:
            - "@com.fasterxml.jackson.annotation.JsonFormat(pattern=\"dd-MM-yyyy\", shape = com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING)"
          type: string
          format: string
          description: 'Calibration Date of BA Device'
          example: "30-01-2021"
        testDateTime:
          x-java-field-annotations:
            - "@com.fasterxml.jackson.annotation.JsonFormat(pattern=\"dd-MM-yyyyTHH:mm:ss.SSS\", shape = com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING)"
          type: string
          format: string
          description: 'time of BA Test'
          example: '1995-09-07T10:40:52Z'
        image:
          type: "string"

      xml:
        name: "BreathAnalyzer"

    BreathAnalyzerResponse:
      type: object
      properties:
        phoneNumbers:
          type: array
          items:
            $ref: '#/components/schemas/BreathAnalyzer'

    BreathAnalyzerResponseDto:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/BreathAnalyzerResponse'
        Meta:
          $ref: '#/components/schemas/Meta'

    Meta:
      type: object
      properties:
        totalRecords:
          type: integer
          format: int64
          example: 10
        totalPages:
          type: integer
          format: int64
          example: 10

    ErrorResponse:
      type: object
      properties:
        errorCode:
          type: string
          example: 400
        message:
          type: string
          example: Some Error Message

    Location:
      x-java-class-annotations:
        -  "@javax.persistence.Entity"
      type: "object"
      properties:
        id:
          x-java-field-annotations:
            - "@javax.persistence.Id"
            - "@javax.persistence.GeneratedValue(strategy = javax.persistence.GenerationType.IDENTITY)"
          type: integer
          format: int64
        name:
          type: "string"
        parent:
          type: "string"

    LocationResponse:
      type: object
      properties:
        phoneNumbers:
          type: array
          items:
            $ref: '#/components/schemas/Location'

    LocationResponseDto:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/LocationResponse'
        Meta:
          $ref: '#/components/schemas/Meta'

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user

  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BreathAnalyzer'
        application/xml:
          schema:
            $ref: '#/components/schemas/BreathAnalyzer'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'

